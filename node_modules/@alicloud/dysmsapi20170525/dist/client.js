"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddShortUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            effectiveDays: 'EffectiveDays',
            ownerId: 'OwnerId',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            shortUrlName: 'ShortUrlName',
            sourceUrl: 'SourceUrl',
        };
    }
    static types() {
        return {
            effectiveDays: 'string',
            ownerId: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            shortUrlName: 'string',
            sourceUrl: 'string',
        };
    }
}
exports.AddShortUrlRequest = AddShortUrlRequest;
class AddShortUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: AddShortUrlResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.AddShortUrlResponseBody = AddShortUrlResponseBody;
class AddShortUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddShortUrlResponseBody,
        };
    }
}
exports.AddShortUrlResponse = AddShortUrlResponse;
class AddSmsSignRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            remark: 'Remark',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            signFileList: 'SignFileList',
            signName: 'SignName',
            signSource: 'SignSource',
            signType: 'SignType',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            remark: 'string',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            signFileList: { 'type': 'array', 'itemType': AddSmsSignRequestSignFileList },
            signName: 'string',
            signSource: 'number',
            signType: 'number',
        };
    }
}
exports.AddSmsSignRequest = AddSmsSignRequest;
class AddSmsSignResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
            signName: 'SignName',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            requestId: 'string',
            signName: 'string',
        };
    }
}
exports.AddSmsSignResponseBody = AddSmsSignResponseBody;
class AddSmsSignResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddSmsSignResponseBody,
        };
    }
}
exports.AddSmsSignResponse = AddSmsSignResponse;
class AddSmsTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            remark: 'Remark',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            templateContent: 'TemplateContent',
            templateName: 'TemplateName',
            templateType: 'TemplateType',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            remark: 'string',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            templateContent: 'string',
            templateName: 'string',
            templateType: 'number',
        };
    }
}
exports.AddSmsTemplateRequest = AddSmsTemplateRequest;
class AddSmsTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
            templateCode: 'TemplateCode',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            requestId: 'string',
            templateCode: 'string',
        };
    }
}
exports.AddSmsTemplateResponseBody = AddSmsTemplateResponseBody;
class AddSmsTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddSmsTemplateResponseBody,
        };
    }
}
exports.AddSmsTemplateResponse = AddSmsTemplateResponse;
class CheckMobilesCardSupportRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mobiles: 'Mobiles',
            templateCode: 'TemplateCode',
        };
    }
    static types() {
        return {
            mobiles: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            templateCode: 'string',
        };
    }
}
exports.CheckMobilesCardSupportRequest = CheckMobilesCardSupportRequest;
class CheckMobilesCardSupportResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CheckMobilesCardSupportResponseBodyData,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CheckMobilesCardSupportResponseBody = CheckMobilesCardSupportResponseBody;
class CheckMobilesCardSupportResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckMobilesCardSupportResponseBody,
        };
    }
}
exports.CheckMobilesCardSupportResponse = CheckMobilesCardSupportResponse;
class ConversionDataIntlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conversionRate: 'ConversionRate',
            ownerId: 'OwnerId',
            reportTime: 'ReportTime',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
        };
    }
    static types() {
        return {
            conversionRate: 'string',
            ownerId: 'number',
            reportTime: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
        };
    }
}
exports.ConversionDataIntlRequest = ConversionDataIntlRequest;
class ConversionDataIntlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.ConversionDataIntlResponseBody = ConversionDataIntlResponseBody;
class ConversionDataIntlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ConversionDataIntlResponseBody,
        };
    }
}
exports.ConversionDataIntlResponse = ConversionDataIntlResponse;
class CreateCardSmsTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            factorys: 'Factorys',
            memo: 'Memo',
            template: 'Template',
            templateName: 'TemplateName',
        };
    }
    static types() {
        return {
            factorys: 'string',
            memo: 'string',
            template: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            templateName: 'string',
        };
    }
}
exports.CreateCardSmsTemplateRequest = CreateCardSmsTemplateRequest;
class CreateCardSmsTemplateShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            factorys: 'Factorys',
            memo: 'Memo',
            templateShrink: 'Template',
            templateName: 'TemplateName',
        };
    }
    static types() {
        return {
            factorys: 'string',
            memo: 'string',
            templateShrink: 'string',
            templateName: 'string',
        };
    }
}
exports.CreateCardSmsTemplateShrinkRequest = CreateCardSmsTemplateShrinkRequest;
class CreateCardSmsTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateCardSmsTemplateResponseBodyData,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateCardSmsTemplateResponseBody = CreateCardSmsTemplateResponseBody;
class CreateCardSmsTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCardSmsTemplateResponseBody,
        };
    }
}
exports.CreateCardSmsTemplateResponse = CreateCardSmsTemplateResponse;
class CreateSmartShortUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            expiration: 'Expiration',
            ownerId: 'OwnerId',
            phoneNumbers: 'PhoneNumbers',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            sourceName: 'SourceName',
            sourceUrl: 'SourceUrl',
        };
    }
    static types() {
        return {
            expiration: 'number',
            ownerId: 'number',
            phoneNumbers: 'string',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            sourceName: 'string',
            sourceUrl: 'string',
        };
    }
}
exports.CreateSmartShortUrlRequest = CreateSmartShortUrlRequest;
class CreateSmartShortUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            model: 'Model',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            model: { 'type': 'array', 'itemType': CreateSmartShortUrlResponseBodyModel },
            requestId: 'string',
        };
    }
}
exports.CreateSmartShortUrlResponseBody = CreateSmartShortUrlResponseBody;
class CreateSmartShortUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateSmartShortUrlResponseBody,
        };
    }
}
exports.CreateSmartShortUrlResponse = CreateSmartShortUrlResponse;
class DeleteShortUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            sourceUrl: 'SourceUrl',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            sourceUrl: 'string',
        };
    }
}
exports.DeleteShortUrlRequest = DeleteShortUrlRequest;
class DeleteShortUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.DeleteShortUrlResponseBody = DeleteShortUrlResponseBody;
class DeleteShortUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteShortUrlResponseBody,
        };
    }
}
exports.DeleteShortUrlResponse = DeleteShortUrlResponse;
class DeleteSmsSignRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            signName: 'SignName',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            signName: 'string',
        };
    }
}
exports.DeleteSmsSignRequest = DeleteSmsSignRequest;
class DeleteSmsSignResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
            signName: 'SignName',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            requestId: 'string',
            signName: 'string',
        };
    }
}
exports.DeleteSmsSignResponseBody = DeleteSmsSignResponseBody;
class DeleteSmsSignResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteSmsSignResponseBody,
        };
    }
}
exports.DeleteSmsSignResponse = DeleteSmsSignResponse;
class DeleteSmsTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            templateCode: 'TemplateCode',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            templateCode: 'string',
        };
    }
}
exports.DeleteSmsTemplateRequest = DeleteSmsTemplateRequest;
class DeleteSmsTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
            templateCode: 'TemplateCode',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            requestId: 'string',
            templateCode: 'string',
        };
    }
}
exports.DeleteSmsTemplateResponseBody = DeleteSmsTemplateResponseBody;
class DeleteSmsTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteSmsTemplateResponseBody,
        };
    }
}
exports.DeleteSmsTemplateResponse = DeleteSmsTemplateResponse;
class GetCardSmsLinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardCodeType: 'CardCodeType',
            cardLinkType: 'CardLinkType',
            cardTemplateCode: 'CardTemplateCode',
            cardTemplateParamJson: 'CardTemplateParamJson',
            customShortCodeJson: 'CustomShortCodeJson',
            domain: 'Domain',
            outId: 'OutId',
            phoneNumberJson: 'PhoneNumberJson',
            signNameJson: 'SignNameJson',
        };
    }
    static types() {
        return {
            cardCodeType: 'number',
            cardLinkType: 'number',
            cardTemplateCode: 'string',
            cardTemplateParamJson: 'string',
            customShortCodeJson: 'string',
            domain: 'string',
            outId: 'string',
            phoneNumberJson: 'string',
            signNameJson: 'string',
        };
    }
}
exports.GetCardSmsLinkRequest = GetCardSmsLinkRequest;
class GetCardSmsLinkResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetCardSmsLinkResponseBodyData,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetCardSmsLinkResponseBody = GetCardSmsLinkResponseBody;
class GetCardSmsLinkResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCardSmsLinkResponseBody,
        };
    }
}
exports.GetCardSmsLinkResponse = GetCardSmsLinkResponse;
class GetMediaResourceIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extendInfo: 'ExtendInfo',
            fileSize: 'FileSize',
            memo: 'Memo',
            ossKey: 'OssKey',
            resourceType: 'ResourceType',
        };
    }
    static types() {
        return {
            extendInfo: 'string',
            fileSize: 'number',
            memo: 'string',
            ossKey: 'string',
            resourceType: 'number',
        };
    }
}
exports.GetMediaResourceIdRequest = GetMediaResourceIdRequest;
class GetMediaResourceIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetMediaResourceIdResponseBodyData,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetMediaResourceIdResponseBody = GetMediaResourceIdResponseBody;
class GetMediaResourceIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMediaResourceIdResponseBody,
        };
    }
}
exports.GetMediaResourceIdResponse = GetMediaResourceIdResponse;
class GetOSSInfoForCardTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetOSSInfoForCardTemplateResponseBodyData,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetOSSInfoForCardTemplateResponseBody = GetOSSInfoForCardTemplateResponseBody;
class GetOSSInfoForCardTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOSSInfoForCardTemplateResponseBody,
        };
    }
}
exports.GetOSSInfoForCardTemplateResponse = GetOSSInfoForCardTemplateResponse;
class ListTagResourcesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'NextToken',
            ownerId: 'OwnerId',
            pageSize: 'PageSize',
            prodCode: 'ProdCode',
            regionId: 'RegionId',
            resourceId: 'ResourceId',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            resourceType: 'ResourceType',
            tag: 'Tag',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            ownerId: 'number',
            pageSize: 'number',
            prodCode: 'string',
            regionId: 'string',
            resourceId: { 'type': 'array', 'itemType': 'string' },
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            resourceType: 'string',
            tag: { 'type': 'array', 'itemType': ListTagResourcesRequestTag },
        };
    }
}
exports.ListTagResourcesRequest = ListTagResourcesRequest;
class ListTagResourcesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            nextToken: 'NextToken',
            requestId: 'RequestId',
            tagResources: 'TagResources',
        };
    }
    static types() {
        return {
            code: 'string',
            nextToken: 'string',
            requestId: 'string',
            tagResources: ListTagResourcesResponseBodyTagResources,
        };
    }
}
exports.ListTagResourcesResponseBody = ListTagResourcesResponseBody;
class ListTagResourcesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListTagResourcesResponseBody,
        };
    }
}
exports.ListTagResourcesResponse = ListTagResourcesResponse;
class ModifySmsSignRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            remark: 'Remark',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            signFileList: 'SignFileList',
            signName: 'SignName',
            signSource: 'SignSource',
            signType: 'SignType',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            remark: 'string',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            signFileList: { 'type': 'array', 'itemType': ModifySmsSignRequestSignFileList },
            signName: 'string',
            signSource: 'number',
            signType: 'number',
        };
    }
}
exports.ModifySmsSignRequest = ModifySmsSignRequest;
class ModifySmsSignResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
            signName: 'SignName',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            requestId: 'string',
            signName: 'string',
        };
    }
}
exports.ModifySmsSignResponseBody = ModifySmsSignResponseBody;
class ModifySmsSignResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ModifySmsSignResponseBody,
        };
    }
}
exports.ModifySmsSignResponse = ModifySmsSignResponse;
class ModifySmsTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            remark: 'Remark',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            templateCode: 'TemplateCode',
            templateContent: 'TemplateContent',
            templateName: 'TemplateName',
            templateType: 'TemplateType',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            remark: 'string',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            templateCode: 'string',
            templateContent: 'string',
            templateName: 'string',
            templateType: 'number',
        };
    }
}
exports.ModifySmsTemplateRequest = ModifySmsTemplateRequest;
class ModifySmsTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
            templateCode: 'TemplateCode',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            requestId: 'string',
            templateCode: 'string',
        };
    }
}
exports.ModifySmsTemplateResponseBody = ModifySmsTemplateResponseBody;
class ModifySmsTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ModifySmsTemplateResponseBody,
        };
    }
}
exports.ModifySmsTemplateResponse = ModifySmsTemplateResponse;
class QueryCardSmsTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateCode: 'TemplateCode',
        };
    }
    static types() {
        return {
            templateCode: 'string',
        };
    }
}
exports.QueryCardSmsTemplateRequest = QueryCardSmsTemplateRequest;
class QueryCardSmsTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryCardSmsTemplateResponseBodyData,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryCardSmsTemplateResponseBody = QueryCardSmsTemplateResponseBody;
class QueryCardSmsTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCardSmsTemplateResponseBody,
        };
    }
}
exports.QueryCardSmsTemplateResponse = QueryCardSmsTemplateResponse;
class QueryCardSmsTemplateReportRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'EndDate',
            startDate: 'StartDate',
            templateCodes: 'TemplateCodes',
        };
    }
    static types() {
        return {
            endDate: 'string',
            startDate: 'string',
            templateCodes: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryCardSmsTemplateReportRequest = QueryCardSmsTemplateReportRequest;
class QueryCardSmsTemplateReportResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryCardSmsTemplateReportResponseBodyData,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryCardSmsTemplateReportResponseBody = QueryCardSmsTemplateReportResponseBody;
class QueryCardSmsTemplateReportResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCardSmsTemplateReportResponseBody,
        };
    }
}
exports.QueryCardSmsTemplateReportResponse = QueryCardSmsTemplateReportResponse;
class QueryMobilesCardSupportRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mobiles: 'Mobiles',
            templateCode: 'TemplateCode',
        };
    }
    static types() {
        return {
            mobiles: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            templateCode: 'string',
        };
    }
}
exports.QueryMobilesCardSupportRequest = QueryMobilesCardSupportRequest;
class QueryMobilesCardSupportShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mobilesShrink: 'Mobiles',
            templateCode: 'TemplateCode',
        };
    }
    static types() {
        return {
            mobilesShrink: 'string',
            templateCode: 'string',
        };
    }
}
exports.QueryMobilesCardSupportShrinkRequest = QueryMobilesCardSupportShrinkRequest;
class QueryMobilesCardSupportResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryMobilesCardSupportResponseBodyData,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryMobilesCardSupportResponseBody = QueryMobilesCardSupportResponseBody;
class QueryMobilesCardSupportResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMobilesCardSupportResponseBody,
        };
    }
}
exports.QueryMobilesCardSupportResponse = QueryMobilesCardSupportResponse;
class QueryPageSmartShortUrlLogRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clickState: 'ClickState',
            createDateEnd: 'CreateDateEnd',
            createDateStart: 'CreateDateStart',
            endId: 'EndId',
            ownerId: 'OwnerId',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            phoneNumber: 'PhoneNumber',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            shortName: 'ShortName',
            shortUrl: 'ShortUrl',
            startId: 'StartId',
        };
    }
    static types() {
        return {
            clickState: 'number',
            createDateEnd: 'number',
            createDateStart: 'number',
            endId: 'number',
            ownerId: 'number',
            pageNo: 'number',
            pageSize: 'number',
            phoneNumber: 'string',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            shortName: 'string',
            shortUrl: 'string',
            startId: 'number',
        };
    }
}
exports.QueryPageSmartShortUrlLogRequest = QueryPageSmartShortUrlLogRequest;
class QueryPageSmartShortUrlLogResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            model: 'Model',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            model: QueryPageSmartShortUrlLogResponseBodyModel,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryPageSmartShortUrlLogResponseBody = QueryPageSmartShortUrlLogResponseBody;
class QueryPageSmartShortUrlLogResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPageSmartShortUrlLogResponseBody,
        };
    }
}
exports.QueryPageSmartShortUrlLogResponse = QueryPageSmartShortUrlLogResponse;
class QuerySendDetailsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'BizId',
            currentPage: 'CurrentPage',
            ownerId: 'OwnerId',
            pageSize: 'PageSize',
            phoneNumber: 'PhoneNumber',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            sendDate: 'SendDate',
        };
    }
    static types() {
        return {
            bizId: 'string',
            currentPage: 'number',
            ownerId: 'number',
            pageSize: 'number',
            phoneNumber: 'string',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            sendDate: 'string',
        };
    }
}
exports.QuerySendDetailsRequest = QuerySendDetailsRequest;
class QuerySendDetailsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
            smsSendDetailDTOs: 'SmsSendDetailDTOs',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            requestId: 'string',
            smsSendDetailDTOs: QuerySendDetailsResponseBodySmsSendDetailDTOs,
            totalCount: 'string',
        };
    }
}
exports.QuerySendDetailsResponseBody = QuerySendDetailsResponseBody;
class QuerySendDetailsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySendDetailsResponseBody,
        };
    }
}
exports.QuerySendDetailsResponse = QuerySendDetailsResponse;
class QuerySendStatisticsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'EndDate',
            isGlobe: 'IsGlobe',
            ownerId: 'OwnerId',
            pageIndex: 'PageIndex',
            pageSize: 'PageSize',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            signName: 'SignName',
            startDate: 'StartDate',
            templateType: 'TemplateType',
        };
    }
    static types() {
        return {
            endDate: 'string',
            isGlobe: 'number',
            ownerId: 'number',
            pageIndex: 'number',
            pageSize: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            signName: 'string',
            startDate: 'string',
            templateType: 'number',
        };
    }
}
exports.QuerySendStatisticsRequest = QuerySendStatisticsRequest;
class QuerySendStatisticsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QuerySendStatisticsResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.QuerySendStatisticsResponseBody = QuerySendStatisticsResponseBody;
class QuerySendStatisticsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySendStatisticsResponseBody,
        };
    }
}
exports.QuerySendStatisticsResponse = QuerySendStatisticsResponse;
class QueryShortUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            shortUrl: 'ShortUrl',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            shortUrl: 'string',
        };
    }
}
exports.QueryShortUrlRequest = QueryShortUrlRequest;
class QueryShortUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryShortUrlResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.QueryShortUrlResponseBody = QueryShortUrlResponseBody;
class QueryShortUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryShortUrlResponseBody,
        };
    }
}
exports.QueryShortUrlResponse = QueryShortUrlResponse;
class QuerySmsSignRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            signName: 'SignName',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            signName: 'string',
        };
    }
}
exports.QuerySmsSignRequest = QuerySmsSignRequest;
class QuerySmsSignResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            createDate: 'CreateDate',
            message: 'Message',
            reason: 'Reason',
            requestId: 'RequestId',
            signName: 'SignName',
            signStatus: 'SignStatus',
        };
    }
    static types() {
        return {
            code: 'string',
            createDate: 'string',
            message: 'string',
            reason: 'string',
            requestId: 'string',
            signName: 'string',
            signStatus: 'number',
        };
    }
}
exports.QuerySmsSignResponseBody = QuerySmsSignResponseBody;
class QuerySmsSignResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySmsSignResponseBody,
        };
    }
}
exports.QuerySmsSignResponse = QuerySmsSignResponse;
class QuerySmsSignListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            pageIndex: 'PageIndex',
            pageSize: 'PageSize',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            pageIndex: 'number',
            pageSize: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
        };
    }
}
exports.QuerySmsSignListRequest = QuerySmsSignListRequest;
class QuerySmsSignListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            currentPage: 'CurrentPage',
            message: 'Message',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            smsSignList: 'SmsSignList',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            code: 'string',
            currentPage: 'number',
            message: 'string',
            pageSize: 'number',
            requestId: 'string',
            smsSignList: { 'type': 'array', 'itemType': QuerySmsSignListResponseBodySmsSignList },
            totalCount: 'number',
        };
    }
}
exports.QuerySmsSignListResponseBody = QuerySmsSignListResponseBody;
class QuerySmsSignListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySmsSignListResponseBody,
        };
    }
}
exports.QuerySmsSignListResponse = QuerySmsSignListResponse;
class QuerySmsTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            templateCode: 'TemplateCode',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            templateCode: 'string',
        };
    }
}
exports.QuerySmsTemplateRequest = QuerySmsTemplateRequest;
class QuerySmsTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            createDate: 'CreateDate',
            message: 'Message',
            reason: 'Reason',
            requestId: 'RequestId',
            templateCode: 'TemplateCode',
            templateContent: 'TemplateContent',
            templateName: 'TemplateName',
            templateStatus: 'TemplateStatus',
            templateType: 'TemplateType',
        };
    }
    static types() {
        return {
            code: 'string',
            createDate: 'string',
            message: 'string',
            reason: 'string',
            requestId: 'string',
            templateCode: 'string',
            templateContent: 'string',
            templateName: 'string',
            templateStatus: 'number',
            templateType: 'number',
        };
    }
}
exports.QuerySmsTemplateResponseBody = QuerySmsTemplateResponseBody;
class QuerySmsTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySmsTemplateResponseBody,
        };
    }
}
exports.QuerySmsTemplateResponse = QuerySmsTemplateResponse;
class QuerySmsTemplateListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            pageIndex: 'PageIndex',
            pageSize: 'PageSize',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            pageIndex: 'number',
            pageSize: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
        };
    }
}
exports.QuerySmsTemplateListRequest = QuerySmsTemplateListRequest;
class QuerySmsTemplateListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            currentPage: 'CurrentPage',
            message: 'Message',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            smsTemplateList: 'SmsTemplateList',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            code: 'string',
            currentPage: 'number',
            message: 'string',
            pageSize: 'number',
            requestId: 'string',
            smsTemplateList: { 'type': 'array', 'itemType': QuerySmsTemplateListResponseBodySmsTemplateList },
            totalCount: 'number',
        };
    }
}
exports.QuerySmsTemplateListResponseBody = QuerySmsTemplateListResponseBody;
class QuerySmsTemplateListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySmsTemplateListResponseBody,
        };
    }
}
exports.QuerySmsTemplateListResponse = QuerySmsTemplateListResponse;
class SendBatchCardSmsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardTemplateCode: 'CardTemplateCode',
            cardTemplateParamJson: 'CardTemplateParamJson',
            digitalTemplateCode: 'DigitalTemplateCode',
            digitalTemplateParamJson: 'DigitalTemplateParamJson',
            fallbackType: 'FallbackType',
            outId: 'OutId',
            phoneNumberJson: 'PhoneNumberJson',
            signNameJson: 'SignNameJson',
            smsTemplateCode: 'SmsTemplateCode',
            smsTemplateParamJson: 'SmsTemplateParamJson',
            smsUpExtendCodeJson: 'SmsUpExtendCodeJson',
            templateCode: 'TemplateCode',
            templateParamJson: 'TemplateParamJson',
        };
    }
    static types() {
        return {
            cardTemplateCode: 'string',
            cardTemplateParamJson: 'string',
            digitalTemplateCode: 'string',
            digitalTemplateParamJson: 'string',
            fallbackType: 'string',
            outId: 'string',
            phoneNumberJson: 'string',
            signNameJson: 'string',
            smsTemplateCode: 'string',
            smsTemplateParamJson: 'string',
            smsUpExtendCodeJson: 'string',
            templateCode: 'string',
            templateParamJson: 'string',
        };
    }
}
exports.SendBatchCardSmsRequest = SendBatchCardSmsRequest;
class SendBatchCardSmsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: SendBatchCardSmsResponseBodyData,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SendBatchCardSmsResponseBody = SendBatchCardSmsResponseBody;
class SendBatchCardSmsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendBatchCardSmsResponseBody,
        };
    }
}
exports.SendBatchCardSmsResponse = SendBatchCardSmsResponse;
class SendBatchSmsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outId: 'OutId',
            ownerId: 'OwnerId',
            phoneNumberJson: 'PhoneNumberJson',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            signNameJson: 'SignNameJson',
            smsUpExtendCodeJson: 'SmsUpExtendCodeJson',
            templateCode: 'TemplateCode',
            templateParamJson: 'TemplateParamJson',
        };
    }
    static types() {
        return {
            outId: 'string',
            ownerId: 'number',
            phoneNumberJson: 'string',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            signNameJson: 'string',
            smsUpExtendCodeJson: 'string',
            templateCode: 'string',
            templateParamJson: 'string',
        };
    }
}
exports.SendBatchSmsRequest = SendBatchSmsRequest;
class SendBatchSmsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'BizId',
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            code: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.SendBatchSmsResponseBody = SendBatchSmsResponseBody;
class SendBatchSmsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendBatchSmsResponseBody,
        };
    }
}
exports.SendBatchSmsResponse = SendBatchSmsResponse;
class SendCardSmsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardObjects: 'CardObjects',
            cardTemplateCode: 'CardTemplateCode',
            digitalTemplateCode: 'DigitalTemplateCode',
            digitalTemplateParam: 'DigitalTemplateParam',
            fallbackType: 'FallbackType',
            outId: 'OutId',
            signName: 'SignName',
            smsTemplateCode: 'SmsTemplateCode',
            smsTemplateParam: 'SmsTemplateParam',
            smsUpExtendCode: 'SmsUpExtendCode',
            templateCode: 'TemplateCode',
            templateParam: 'TemplateParam',
        };
    }
    static types() {
        return {
            cardObjects: { 'type': 'array', 'itemType': SendCardSmsRequestCardObjects },
            cardTemplateCode: 'string',
            digitalTemplateCode: 'string',
            digitalTemplateParam: 'string',
            fallbackType: 'string',
            outId: 'string',
            signName: 'string',
            smsTemplateCode: 'string',
            smsTemplateParam: 'string',
            smsUpExtendCode: 'string',
            templateCode: 'string',
            templateParam: 'string',
        };
    }
}
exports.SendCardSmsRequest = SendCardSmsRequest;
class SendCardSmsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: SendCardSmsResponseBodyData,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SendCardSmsResponseBody = SendCardSmsResponseBody;
class SendCardSmsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendCardSmsResponseBody,
        };
    }
}
exports.SendCardSmsResponse = SendCardSmsResponse;
class SendSmsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outId: 'OutId',
            ownerId: 'OwnerId',
            phoneNumbers: 'PhoneNumbers',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            signName: 'SignName',
            smsUpExtendCode: 'SmsUpExtendCode',
            templateCode: 'TemplateCode',
            templateParam: 'TemplateParam',
        };
    }
    static types() {
        return {
            outId: 'string',
            ownerId: 'number',
            phoneNumbers: 'string',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            signName: 'string',
            smsUpExtendCode: 'string',
            templateCode: 'string',
            templateParam: 'string',
        };
    }
}
exports.SendSmsRequest = SendSmsRequest;
class SendSmsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'BizId',
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            code: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.SendSmsResponseBody = SendSmsResponseBody;
class SendSmsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendSmsResponseBody,
        };
    }
}
exports.SendSmsResponse = SendSmsResponse;
class SmsConversionIntlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conversionTime: 'ConversionTime',
            delivered: 'Delivered',
            messageId: 'MessageId',
            ownerId: 'OwnerId',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
        };
    }
    static types() {
        return {
            conversionTime: 'number',
            delivered: 'boolean',
            messageId: 'string',
            ownerId: 'number',
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
        };
    }
}
exports.SmsConversionIntlRequest = SmsConversionIntlRequest;
class SmsConversionIntlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.SmsConversionIntlResponseBody = SmsConversionIntlResponseBody;
class SmsConversionIntlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SmsConversionIntlResponseBody,
        };
    }
}
exports.SmsConversionIntlResponse = SmsConversionIntlResponse;
class TagResourcesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
            prodCode: 'ProdCode',
            regionId: 'RegionId',
            resourceId: 'ResourceId',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            resourceType: 'ResourceType',
            tag: 'Tag',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            prodCode: 'string',
            regionId: 'string',
            resourceId: { 'type': 'array', 'itemType': 'string' },
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            resourceType: 'string',
            tag: { 'type': 'array', 'itemType': TagResourcesRequestTag },
        };
    }
}
exports.TagResourcesRequest = TagResourcesRequest;
class TagResourcesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.TagResourcesResponseBody = TagResourcesResponseBody;
class TagResourcesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TagResourcesResponseBody,
        };
    }
}
exports.TagResourcesResponse = TagResourcesResponse;
class UntagResourcesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            all: 'All',
            ownerId: 'OwnerId',
            prodCode: 'ProdCode',
            regionId: 'RegionId',
            resourceId: 'ResourceId',
            resourceOwnerAccount: 'ResourceOwnerAccount',
            resourceOwnerId: 'ResourceOwnerId',
            resourceType: 'ResourceType',
            tagKey: 'TagKey',
        };
    }
    static types() {
        return {
            all: 'boolean',
            ownerId: 'number',
            prodCode: 'string',
            regionId: 'string',
            resourceId: { 'type': 'array', 'itemType': 'string' },
            resourceOwnerAccount: 'string',
            resourceOwnerId: 'number',
            resourceType: 'string',
            tagKey: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.UntagResourcesRequest = UntagResourcesRequest;
class UntagResourcesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.UntagResourcesResponseBody = UntagResourcesResponseBody;
class UntagResourcesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UntagResourcesResponseBody,
        };
    }
}
exports.UntagResourcesResponse = UntagResourcesResponse;
class AddShortUrlResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            expireDate: 'ExpireDate',
            shortUrl: 'ShortUrl',
            sourceUrl: 'SourceUrl',
        };
    }
    static types() {
        return {
            expireDate: 'string',
            shortUrl: 'string',
            sourceUrl: 'string',
        };
    }
}
exports.AddShortUrlResponseBodyData = AddShortUrlResponseBodyData;
class AddSmsSignRequestSignFileList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileContents: 'FileContents',
            fileSuffix: 'FileSuffix',
        };
    }
    static types() {
        return {
            fileContents: 'string',
            fileSuffix: 'string',
        };
    }
}
exports.AddSmsSignRequestSignFileList = AddSmsSignRequestSignFileList;
class CheckMobilesCardSupportResponseBodyDataQueryResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mobile: 'mobile',
            support: 'support',
        };
    }
    static types() {
        return {
            mobile: 'string',
            support: 'boolean',
        };
    }
}
exports.CheckMobilesCardSupportResponseBodyDataQueryResult = CheckMobilesCardSupportResponseBodyDataQueryResult;
class CheckMobilesCardSupportResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            queryResult: 'queryResult',
        };
    }
    static types() {
        return {
            queryResult: { 'type': 'array', 'itemType': CheckMobilesCardSupportResponseBodyDataQueryResult },
        };
    }
}
exports.CheckMobilesCardSupportResponseBodyData = CheckMobilesCardSupportResponseBodyData;
class CreateCardSmsTemplateResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateCode: 'TemplateCode',
        };
    }
    static types() {
        return {
            templateCode: 'string',
        };
    }
}
exports.CreateCardSmsTemplateResponseBodyData = CreateCardSmsTemplateResponseBodyData;
class CreateSmartShortUrlResponseBodyModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domain: 'Domain',
            expiration: 'Expiration',
            phoneNumber: 'PhoneNumber',
            shortName: 'ShortName',
            shortUrl: 'ShortUrl',
        };
    }
    static types() {
        return {
            domain: 'string',
            expiration: 'number',
            phoneNumber: 'string',
            shortName: 'string',
            shortUrl: 'string',
        };
    }
}
exports.CreateSmartShortUrlResponseBodyModel = CreateSmartShortUrlResponseBodyModel;
class GetCardSmsLinkResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardPhoneNumbers: 'CardPhoneNumbers',
            cardSignNames: 'CardSignNames',
            cardSmsLinks: 'CardSmsLinks',
            cardTmpState: 'CardTmpState',
            notMediaMobiles: 'NotMediaMobiles',
        };
    }
    static types() {
        return {
            cardPhoneNumbers: 'string',
            cardSignNames: 'string',
            cardSmsLinks: 'string',
            cardTmpState: 'number',
            notMediaMobiles: 'string',
        };
    }
}
exports.GetCardSmsLinkResponseBodyData = GetCardSmsLinkResponseBodyData;
class GetMediaResourceIdResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resUrlDownload: 'ResUrlDownload',
            resourceId: 'ResourceId',
        };
    }
    static types() {
        return {
            resUrlDownload: 'string',
            resourceId: 'number',
        };
    }
}
exports.GetMediaResourceIdResponseBodyData = GetMediaResourceIdResponseBodyData;
class GetOSSInfoForCardTemplateResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'AccessKeyId',
            aliUid: 'AliUid',
            bucket: 'Bucket',
            expireTime: 'ExpireTime',
            host: 'Host',
            policy: 'Policy',
            signature: 'Signature',
            startPath: 'StartPath',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            aliUid: 'string',
            bucket: 'string',
            expireTime: 'string',
            host: 'string',
            policy: 'string',
            signature: 'string',
            startPath: 'string',
        };
    }
}
exports.GetOSSInfoForCardTemplateResponseBodyData = GetOSSInfoForCardTemplateResponseBodyData;
class ListTagResourcesRequestTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.ListTagResourcesRequestTag = ListTagResourcesRequestTag;
class ListTagResourcesResponseBodyTagResourcesTagResource extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resourceId: 'ResourceId',
            resourceType: 'ResourceType',
            tagKey: 'TagKey',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            resourceId: 'string',
            resourceType: 'string',
            tagKey: 'string',
            tagValue: 'string',
        };
    }
}
exports.ListTagResourcesResponseBodyTagResourcesTagResource = ListTagResourcesResponseBodyTagResourcesTagResource;
class ListTagResourcesResponseBodyTagResources extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagResource: 'TagResource',
        };
    }
    static types() {
        return {
            tagResource: { 'type': 'array', 'itemType': ListTagResourcesResponseBodyTagResourcesTagResource },
        };
    }
}
exports.ListTagResourcesResponseBodyTagResources = ListTagResourcesResponseBodyTagResources;
class ModifySmsSignRequestSignFileList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileContents: 'FileContents',
            fileSuffix: 'FileSuffix',
        };
    }
    static types() {
        return {
            fileContents: 'string',
            fileSuffix: 'string',
        };
    }
}
exports.ModifySmsSignRequestSignFileList = ModifySmsSignRequestSignFileList;
class QueryCardSmsTemplateResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templates: 'Templates',
        };
    }
    static types() {
        return {
            templates: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
        };
    }
}
exports.QueryCardSmsTemplateResponseBodyData = QueryCardSmsTemplateResponseBodyData;
class QueryCardSmsTemplateReportResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            model: 'model',
        };
    }
    static types() {
        return {
            model: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
        };
    }
}
exports.QueryCardSmsTemplateReportResponseBodyData = QueryCardSmsTemplateReportResponseBodyData;
class QueryMobilesCardSupportResponseBodyDataQueryResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mobile: 'Mobile',
            support: 'Support',
        };
    }
    static types() {
        return {
            mobile: 'string',
            support: 'boolean',
        };
    }
}
exports.QueryMobilesCardSupportResponseBodyDataQueryResult = QueryMobilesCardSupportResponseBodyDataQueryResult;
class QueryMobilesCardSupportResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            queryResult: 'QueryResult',
        };
    }
    static types() {
        return {
            queryResult: { 'type': 'array', 'itemType': QueryMobilesCardSupportResponseBodyDataQueryResult },
        };
    }
}
exports.QueryMobilesCardSupportResponseBodyData = QueryMobilesCardSupportResponseBodyData;
class QueryPageSmartShortUrlLogResponseBodyModelList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clickState: 'ClickState',
            clickTime: 'ClickTime',
            createTime: 'CreateTime',
            phoneNumber: 'PhoneNumber',
            shortName: 'ShortName',
            shortUrl: 'ShortUrl',
        };
    }
    static types() {
        return {
            clickState: 'number',
            clickTime: 'number',
            createTime: 'number',
            phoneNumber: 'string',
            shortName: 'string',
            shortUrl: 'string',
        };
    }
}
exports.QueryPageSmartShortUrlLogResponseBodyModelList = QueryPageSmartShortUrlLogResponseBodyModelList;
class QueryPageSmartShortUrlLogResponseBodyModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            totalCount: 'TotalCount',
            totalPage: 'TotalPage',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': QueryPageSmartShortUrlLogResponseBodyModelList },
            pageNo: 'number',
            pageSize: 'number',
            totalCount: 'number',
            totalPage: 'number',
        };
    }
}
exports.QueryPageSmartShortUrlLogResponseBodyModel = QueryPageSmartShortUrlLogResponseBodyModel;
class QuerySendDetailsResponseBodySmsSendDetailDTOsSmsSendDetailDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'Content',
            errCode: 'ErrCode',
            outId: 'OutId',
            phoneNum: 'PhoneNum',
            receiveDate: 'ReceiveDate',
            sendDate: 'SendDate',
            sendStatus: 'SendStatus',
            templateCode: 'TemplateCode',
        };
    }
    static types() {
        return {
            content: 'string',
            errCode: 'string',
            outId: 'string',
            phoneNum: 'string',
            receiveDate: 'string',
            sendDate: 'string',
            sendStatus: 'number',
            templateCode: 'string',
        };
    }
}
exports.QuerySendDetailsResponseBodySmsSendDetailDTOsSmsSendDetailDTO = QuerySendDetailsResponseBodySmsSendDetailDTOsSmsSendDetailDTO;
class QuerySendDetailsResponseBodySmsSendDetailDTOs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            smsSendDetailDTO: 'SmsSendDetailDTO',
        };
    }
    static types() {
        return {
            smsSendDetailDTO: { 'type': 'array', 'itemType': QuerySendDetailsResponseBodySmsSendDetailDTOsSmsSendDetailDTO },
        };
    }
}
exports.QuerySendDetailsResponseBodySmsSendDetailDTOs = QuerySendDetailsResponseBodySmsSendDetailDTOs;
class QuerySendStatisticsResponseBodyDataTargetList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            noRespondedCount: 'NoRespondedCount',
            respondedFailCount: 'RespondedFailCount',
            respondedSuccessCount: 'RespondedSuccessCount',
            sendDate: 'SendDate',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            noRespondedCount: 'number',
            respondedFailCount: 'number',
            respondedSuccessCount: 'number',
            sendDate: 'string',
            totalCount: 'number',
        };
    }
}
exports.QuerySendStatisticsResponseBodyDataTargetList = QuerySendStatisticsResponseBodyDataTargetList;
class QuerySendStatisticsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetList: 'TargetList',
            totalSize: 'TotalSize',
        };
    }
    static types() {
        return {
            targetList: { 'type': 'array', 'itemType': QuerySendStatisticsResponseBodyDataTargetList },
            totalSize: 'number',
        };
    }
}
exports.QuerySendStatisticsResponseBodyData = QuerySendStatisticsResponseBodyData;
class QueryShortUrlResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createDate: 'CreateDate',
            expireDate: 'ExpireDate',
            pageViewCount: 'PageViewCount',
            shortUrl: 'ShortUrl',
            shortUrlName: 'ShortUrlName',
            shortUrlStatus: 'ShortUrlStatus',
            sourceUrl: 'SourceUrl',
            uniqueVisitorCount: 'UniqueVisitorCount',
        };
    }
    static types() {
        return {
            createDate: 'string',
            expireDate: 'string',
            pageViewCount: 'string',
            shortUrl: 'string',
            shortUrlName: 'string',
            shortUrlStatus: 'string',
            sourceUrl: 'string',
            uniqueVisitorCount: 'string',
        };
    }
}
exports.QueryShortUrlResponseBodyData = QueryShortUrlResponseBodyData;
class QuerySmsSignListResponseBodySmsSignListReason extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            rejectDate: 'RejectDate',
            rejectInfo: 'RejectInfo',
            rejectSubInfo: 'RejectSubInfo',
        };
    }
    static types() {
        return {
            rejectDate: 'string',
            rejectInfo: 'string',
            rejectSubInfo: 'string',
        };
    }
}
exports.QuerySmsSignListResponseBodySmsSignListReason = QuerySmsSignListResponseBodySmsSignListReason;
class QuerySmsSignListResponseBodySmsSignList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auditStatus: 'AuditStatus',
            businessType: 'BusinessType',
            createDate: 'CreateDate',
            orderId: 'OrderId',
            reason: 'Reason',
            signName: 'SignName',
        };
    }
    static types() {
        return {
            auditStatus: 'string',
            businessType: 'string',
            createDate: 'string',
            orderId: 'string',
            reason: QuerySmsSignListResponseBodySmsSignListReason,
            signName: 'string',
        };
    }
}
exports.QuerySmsSignListResponseBodySmsSignList = QuerySmsSignListResponseBodySmsSignList;
class QuerySmsTemplateListResponseBodySmsTemplateListReason extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            rejectDate: 'RejectDate',
            rejectInfo: 'RejectInfo',
            rejectSubInfo: 'RejectSubInfo',
        };
    }
    static types() {
        return {
            rejectDate: 'string',
            rejectInfo: 'string',
            rejectSubInfo: 'string',
        };
    }
}
exports.QuerySmsTemplateListResponseBodySmsTemplateListReason = QuerySmsTemplateListResponseBodySmsTemplateListReason;
class QuerySmsTemplateListResponseBodySmsTemplateList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auditStatus: 'AuditStatus',
            createDate: 'CreateDate',
            orderId: 'OrderId',
            outerTemplateType: 'OuterTemplateType',
            reason: 'Reason',
            templateCode: 'TemplateCode',
            templateContent: 'TemplateContent',
            templateName: 'TemplateName',
            templateType: 'TemplateType',
        };
    }
    static types() {
        return {
            auditStatus: 'string',
            createDate: 'string',
            orderId: 'string',
            outerTemplateType: 'number',
            reason: QuerySmsTemplateListResponseBodySmsTemplateListReason,
            templateCode: 'string',
            templateContent: 'string',
            templateName: 'string',
            templateType: 'number',
        };
    }
}
exports.QuerySmsTemplateListResponseBodySmsTemplateList = QuerySmsTemplateListResponseBodySmsTemplateList;
class SendBatchCardSmsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCardId: 'BizCardId',
            bizDigitalId: 'BizDigitalId',
            bizSmsId: 'BizSmsId',
            cardTmpState: 'CardTmpState',
            mediaMobiles: 'MediaMobiles',
            notMediaMobiles: 'NotMediaMobiles',
        };
    }
    static types() {
        return {
            bizCardId: 'string',
            bizDigitalId: 'string',
            bizSmsId: 'string',
            cardTmpState: 'number',
            mediaMobiles: 'string',
            notMediaMobiles: 'string',
        };
    }
}
exports.SendBatchCardSmsResponseBodyData = SendBatchCardSmsResponseBodyData;
class SendCardSmsRequestCardObjects extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            customUrl: 'customUrl',
            dyncParams: 'dyncParams',
            mobile: 'mobile',
        };
    }
    static types() {
        return {
            customUrl: 'string',
            dyncParams: 'string',
            mobile: 'string',
        };
    }
}
exports.SendCardSmsRequestCardObjects = SendCardSmsRequestCardObjects;
class SendCardSmsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCardId: 'BizCardId',
            bizDigitalId: 'BizDigitalId',
            bizSmsId: 'BizSmsId',
            cardTmpState: 'CardTmpState',
            mediaMobiles: 'MediaMobiles',
            notMediaMobiles: 'NotMediaMobiles',
        };
    }
    static types() {
        return {
            bizCardId: 'string',
            bizDigitalId: 'string',
            bizSmsId: 'string',
            cardTmpState: 'number',
            mediaMobiles: 'string',
            notMediaMobiles: 'string',
        };
    }
}
exports.SendCardSmsResponseBodyData = SendCardSmsResponseBodyData;
class TagResourcesRequestTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.TagResourcesRequestTag = TagResourcesRequestTag;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "central";
        this._endpointMap = {
            'ap-southeast-1': "dysmsapi.ap-southeast-1.aliyuncs.com",
            'ap-southeast-5': "dysmsapi.ap-southeast-5.aliyuncs.com",
            'cn-beijing': "dysmsapi-proxy.cn-beijing.aliyuncs.com",
            'cn-hongkong': "dysmsapi-xman.cn-hongkong.aliyuncs.com",
            'eu-central-1': "dysmsapi.eu-central-1.aliyuncs.com",
            'us-east-1': "dysmsapi.us-east-1.aliyuncs.com",
        };
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("dysmsapi", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.isUnset(endpointMap) && !tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
    async addShortUrlWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.effectiveDays)) {
            body["EffectiveDays"] = request.effectiveDays;
        }
        if (!tea_util_1.default.isUnset(request.shortUrlName)) {
            body["ShortUrlName"] = request.shortUrlName;
        }
        if (!tea_util_1.default.isUnset(request.sourceUrl)) {
            body["SourceUrl"] = request.sourceUrl;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddShortUrl",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AddShortUrlResponse({}));
    }
    async addShortUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addShortUrlWithOptions(request, runtime);
    }
    async addSmsSignWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            query["Remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.signName)) {
            query["SignName"] = request.signName;
        }
        if (!tea_util_1.default.isUnset(request.signSource)) {
            query["SignSource"] = request.signSource;
        }
        if (!tea_util_1.default.isUnset(request.signType)) {
            query["SignType"] = request.signType;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.signFileList)) {
            body["SignFileList"] = request.signFileList;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddSmsSign",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AddSmsSignResponse({}));
    }
    async addSmsSign(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addSmsSignWithOptions(request, runtime);
    }
    async addSmsTemplateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            query["Remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.templateContent)) {
            query["TemplateContent"] = request.templateContent;
        }
        if (!tea_util_1.default.isUnset(request.templateName)) {
            query["TemplateName"] = request.templateName;
        }
        if (!tea_util_1.default.isUnset(request.templateType)) {
            query["TemplateType"] = request.templateType;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AddSmsTemplate",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AddSmsTemplateResponse({}));
    }
    async addSmsTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addSmsTemplateWithOptions(request, runtime);
    }
    async checkMobilesCardSupportWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.mobiles)) {
            query["Mobiles"] = request.mobiles;
        }
        if (!tea_util_1.default.isUnset(request.templateCode)) {
            query["TemplateCode"] = request.templateCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CheckMobilesCardSupport",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CheckMobilesCardSupportResponse({}));
    }
    async checkMobilesCardSupport(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.checkMobilesCardSupportWithOptions(request, runtime);
    }
    async conversionDataIntlWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.conversionRate)) {
            query["ConversionRate"] = request.conversionRate;
        }
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.reportTime)) {
            query["ReportTime"] = request.reportTime;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ConversionDataIntl",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ConversionDataIntlResponse({}));
    }
    async conversionDataIntl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.conversionDataIntlWithOptions(request, runtime);
    }
    async createCardSmsTemplateWithOptions(tmpReq, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new CreateCardSmsTemplateShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.template)) {
            request.templateShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.template, "Template", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.factorys)) {
            query["Factorys"] = request.factorys;
        }
        if (!tea_util_1.default.isUnset(request.memo)) {
            query["Memo"] = request.memo;
        }
        if (!tea_util_1.default.isUnset(request.templateShrink)) {
            query["Template"] = request.templateShrink;
        }
        if (!tea_util_1.default.isUnset(request.templateName)) {
            query["TemplateName"] = request.templateName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateCardSmsTemplate",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateCardSmsTemplateResponse({}));
    }
    async createCardSmsTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createCardSmsTemplateWithOptions(request, runtime);
    }
    async createSmartShortUrlWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.expiration)) {
            query["Expiration"] = request.expiration;
        }
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.phoneNumbers)) {
            query["PhoneNumbers"] = request.phoneNumbers;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.sourceName)) {
            query["SourceName"] = request.sourceName;
        }
        if (!tea_util_1.default.isUnset(request.sourceUrl)) {
            query["SourceUrl"] = request.sourceUrl;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateSmartShortUrl",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateSmartShortUrlResponse({}));
    }
    async createSmartShortUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createSmartShortUrlWithOptions(request, runtime);
    }
    async deleteShortUrlWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.sourceUrl)) {
            body["SourceUrl"] = request.sourceUrl;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteShortUrl",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteShortUrlResponse({}));
    }
    async deleteShortUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteShortUrlWithOptions(request, runtime);
    }
    async deleteSmsSignWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.signName)) {
            query["SignName"] = request.signName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteSmsSign",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteSmsSignResponse({}));
    }
    async deleteSmsSign(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteSmsSignWithOptions(request, runtime);
    }
    async deleteSmsTemplateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.templateCode)) {
            query["TemplateCode"] = request.templateCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteSmsTemplate",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteSmsTemplateResponse({}));
    }
    async deleteSmsTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteSmsTemplateWithOptions(request, runtime);
    }
    async getCardSmsLinkWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.cardCodeType)) {
            query["CardCodeType"] = request.cardCodeType;
        }
        if (!tea_util_1.default.isUnset(request.cardLinkType)) {
            query["CardLinkType"] = request.cardLinkType;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateCode)) {
            query["CardTemplateCode"] = request.cardTemplateCode;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateParamJson)) {
            query["CardTemplateParamJson"] = request.cardTemplateParamJson;
        }
        if (!tea_util_1.default.isUnset(request.customShortCodeJson)) {
            query["CustomShortCodeJson"] = request.customShortCodeJson;
        }
        if (!tea_util_1.default.isUnset(request.domain)) {
            query["Domain"] = request.domain;
        }
        if (!tea_util_1.default.isUnset(request.outId)) {
            query["OutId"] = request.outId;
        }
        if (!tea_util_1.default.isUnset(request.phoneNumberJson)) {
            query["PhoneNumberJson"] = request.phoneNumberJson;
        }
        if (!tea_util_1.default.isUnset(request.signNameJson)) {
            query["SignNameJson"] = request.signNameJson;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCardSmsLink",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetCardSmsLinkResponse({}));
    }
    async getCardSmsLink(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getCardSmsLinkWithOptions(request, runtime);
    }
    async getMediaResourceIdWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.extendInfo)) {
            query["ExtendInfo"] = request.extendInfo;
        }
        if (!tea_util_1.default.isUnset(request.fileSize)) {
            query["FileSize"] = request.fileSize;
        }
        if (!tea_util_1.default.isUnset(request.memo)) {
            query["Memo"] = request.memo;
        }
        if (!tea_util_1.default.isUnset(request.ossKey)) {
            query["OssKey"] = request.ossKey;
        }
        if (!tea_util_1.default.isUnset(request.resourceType)) {
            query["ResourceType"] = request.resourceType;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetMediaResourceId",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetMediaResourceIdResponse({}));
    }
    async getMediaResourceId(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getMediaResourceIdWithOptions(request, runtime);
    }
    async getOSSInfoForCardTemplateWithOptions(runtime) {
        let req = new $OpenApi.OpenApiRequest({});
        let params = new $OpenApi.Params({
            action: "GetOSSInfoForCardTemplate",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetOSSInfoForCardTemplateResponse({}));
    }
    async getOSSInfoForCardTemplate() {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getOSSInfoForCardTemplateWithOptions(runtime);
    }
    async listTagResourcesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["NextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.prodCode)) {
            query["ProdCode"] = request.prodCode;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.resourceId)) {
            query["ResourceId"] = request.resourceId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceType)) {
            query["ResourceType"] = request.resourceType;
        }
        if (!tea_util_1.default.isUnset(request.tag)) {
            query["Tag"] = request.tag;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListTagResources",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListTagResourcesResponse({}));
    }
    async listTagResources(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listTagResourcesWithOptions(request, runtime);
    }
    async modifySmsSignWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            query["Remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.signName)) {
            query["SignName"] = request.signName;
        }
        if (!tea_util_1.default.isUnset(request.signSource)) {
            query["SignSource"] = request.signSource;
        }
        if (!tea_util_1.default.isUnset(request.signType)) {
            query["SignType"] = request.signType;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.signFileList)) {
            body["SignFileList"] = request.signFileList;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ModifySmsSign",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ModifySmsSignResponse({}));
    }
    async modifySmsSign(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.modifySmsSignWithOptions(request, runtime);
    }
    async modifySmsTemplateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            query["Remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.templateCode)) {
            query["TemplateCode"] = request.templateCode;
        }
        if (!tea_util_1.default.isUnset(request.templateContent)) {
            query["TemplateContent"] = request.templateContent;
        }
        if (!tea_util_1.default.isUnset(request.templateName)) {
            query["TemplateName"] = request.templateName;
        }
        if (!tea_util_1.default.isUnset(request.templateType)) {
            query["TemplateType"] = request.templateType;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ModifySmsTemplate",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ModifySmsTemplateResponse({}));
    }
    async modifySmsTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.modifySmsTemplateWithOptions(request, runtime);
    }
    async queryCardSmsTemplateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.templateCode)) {
            query["TemplateCode"] = request.templateCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCardSmsTemplate",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryCardSmsTemplateResponse({}));
    }
    async queryCardSmsTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryCardSmsTemplateWithOptions(request, runtime);
    }
    async queryCardSmsTemplateReportWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endDate)) {
            query["EndDate"] = request.endDate;
        }
        if (!tea_util_1.default.isUnset(request.startDate)) {
            query["StartDate"] = request.startDate;
        }
        if (!tea_util_1.default.isUnset(request.templateCodes)) {
            query["TemplateCodes"] = request.templateCodes;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCardSmsTemplateReport",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryCardSmsTemplateReportResponse({}));
    }
    async queryCardSmsTemplateReport(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryCardSmsTemplateReportWithOptions(request, runtime);
    }
    async queryMobilesCardSupportWithOptions(tmpReq, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new QueryMobilesCardSupportShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.mobiles)) {
            request.mobilesShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.mobiles, "Mobiles", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.mobilesShrink)) {
            query["Mobiles"] = request.mobilesShrink;
        }
        if (!tea_util_1.default.isUnset(request.templateCode)) {
            query["TemplateCode"] = request.templateCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMobilesCardSupport",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryMobilesCardSupportResponse({}));
    }
    async queryMobilesCardSupport(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMobilesCardSupportWithOptions(request, runtime);
    }
    async queryPageSmartShortUrlLogWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clickState)) {
            query["ClickState"] = request.clickState;
        }
        if (!tea_util_1.default.isUnset(request.createDateEnd)) {
            query["CreateDateEnd"] = request.createDateEnd;
        }
        if (!tea_util_1.default.isUnset(request.createDateStart)) {
            query["CreateDateStart"] = request.createDateStart;
        }
        if (!tea_util_1.default.isUnset(request.endId)) {
            query["EndId"] = request.endId;
        }
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.pageNo)) {
            query["PageNo"] = request.pageNo;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.phoneNumber)) {
            query["PhoneNumber"] = request.phoneNumber;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.shortName)) {
            query["ShortName"] = request.shortName;
        }
        if (!tea_util_1.default.isUnset(request.shortUrl)) {
            query["ShortUrl"] = request.shortUrl;
        }
        if (!tea_util_1.default.isUnset(request.startId)) {
            query["StartId"] = request.startId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryPageSmartShortUrlLog",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryPageSmartShortUrlLogResponse({}));
    }
    async queryPageSmartShortUrlLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryPageSmartShortUrlLogWithOptions(request, runtime);
    }
    async querySendDetailsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            query["BizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.phoneNumber)) {
            query["PhoneNumber"] = request.phoneNumber;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.sendDate)) {
            query["SendDate"] = request.sendDate;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySendDetails",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySendDetailsResponse({}));
    }
    async querySendDetails(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySendDetailsWithOptions(request, runtime);
    }
    async querySendStatisticsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endDate)) {
            query["EndDate"] = request.endDate;
        }
        if (!tea_util_1.default.isUnset(request.isGlobe)) {
            query["IsGlobe"] = request.isGlobe;
        }
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.pageIndex)) {
            query["PageIndex"] = request.pageIndex;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.signName)) {
            query["SignName"] = request.signName;
        }
        if (!tea_util_1.default.isUnset(request.startDate)) {
            query["StartDate"] = request.startDate;
        }
        if (!tea_util_1.default.isUnset(request.templateType)) {
            query["TemplateType"] = request.templateType;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySendStatistics",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySendStatisticsResponse({}));
    }
    async querySendStatistics(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySendStatisticsWithOptions(request, runtime);
    }
    async queryShortUrlWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.shortUrl)) {
            body["ShortUrl"] = request.shortUrl;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryShortUrl",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryShortUrlResponse({}));
    }
    async queryShortUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryShortUrlWithOptions(request, runtime);
    }
    async querySmsSignWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.signName)) {
            query["SignName"] = request.signName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySmsSign",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySmsSignResponse({}));
    }
    async querySmsSign(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySmsSignWithOptions(request, runtime);
    }
    async querySmsSignListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.pageIndex)) {
            query["PageIndex"] = request.pageIndex;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySmsSignList",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySmsSignListResponse({}));
    }
    async querySmsSignList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySmsSignListWithOptions(request, runtime);
    }
    async querySmsTemplateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.templateCode)) {
            query["TemplateCode"] = request.templateCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySmsTemplate",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySmsTemplateResponse({}));
    }
    async querySmsTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySmsTemplateWithOptions(request, runtime);
    }
    async querySmsTemplateListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.pageIndex)) {
            query["PageIndex"] = request.pageIndex;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySmsTemplateList",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySmsTemplateListResponse({}));
    }
    async querySmsTemplateList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySmsTemplateListWithOptions(request, runtime);
    }
    async sendBatchCardSmsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.cardTemplateCode)) {
            query["CardTemplateCode"] = request.cardTemplateCode;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateParamJson)) {
            query["CardTemplateParamJson"] = request.cardTemplateParamJson;
        }
        if (!tea_util_1.default.isUnset(request.digitalTemplateCode)) {
            query["DigitalTemplateCode"] = request.digitalTemplateCode;
        }
        if (!tea_util_1.default.isUnset(request.digitalTemplateParamJson)) {
            query["DigitalTemplateParamJson"] = request.digitalTemplateParamJson;
        }
        if (!tea_util_1.default.isUnset(request.fallbackType)) {
            query["FallbackType"] = request.fallbackType;
        }
        if (!tea_util_1.default.isUnset(request.outId)) {
            query["OutId"] = request.outId;
        }
        if (!tea_util_1.default.isUnset(request.phoneNumberJson)) {
            query["PhoneNumberJson"] = request.phoneNumberJson;
        }
        if (!tea_util_1.default.isUnset(request.signNameJson)) {
            query["SignNameJson"] = request.signNameJson;
        }
        if (!tea_util_1.default.isUnset(request.smsTemplateCode)) {
            query["SmsTemplateCode"] = request.smsTemplateCode;
        }
        if (!tea_util_1.default.isUnset(request.smsTemplateParamJson)) {
            query["SmsTemplateParamJson"] = request.smsTemplateParamJson;
        }
        if (!tea_util_1.default.isUnset(request.smsUpExtendCodeJson)) {
            query["SmsUpExtendCodeJson"] = request.smsUpExtendCodeJson;
        }
        if (!tea_util_1.default.isUnset(request.templateCode)) {
            query["TemplateCode"] = request.templateCode;
        }
        if (!tea_util_1.default.isUnset(request.templateParamJson)) {
            query["TemplateParamJson"] = request.templateParamJson;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SendBatchCardSms",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SendBatchCardSmsResponse({}));
    }
    async sendBatchCardSms(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.sendBatchCardSmsWithOptions(request, runtime);
    }
    async sendBatchSmsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.outId)) {
            query["OutId"] = request.outId;
        }
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.templateCode)) {
            query["TemplateCode"] = request.templateCode;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.phoneNumberJson)) {
            body["PhoneNumberJson"] = request.phoneNumberJson;
        }
        if (!tea_util_1.default.isUnset(request.signNameJson)) {
            body["SignNameJson"] = request.signNameJson;
        }
        if (!tea_util_1.default.isUnset(request.smsUpExtendCodeJson)) {
            body["SmsUpExtendCodeJson"] = request.smsUpExtendCodeJson;
        }
        if (!tea_util_1.default.isUnset(request.templateParamJson)) {
            body["TemplateParamJson"] = request.templateParamJson;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendBatchSms",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SendBatchSmsResponse({}));
    }
    async sendBatchSms(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.sendBatchSmsWithOptions(request, runtime);
    }
    async sendCardSmsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.cardObjects)) {
            query["CardObjects"] = request.cardObjects;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateCode)) {
            query["CardTemplateCode"] = request.cardTemplateCode;
        }
        if (!tea_util_1.default.isUnset(request.digitalTemplateCode)) {
            query["DigitalTemplateCode"] = request.digitalTemplateCode;
        }
        if (!tea_util_1.default.isUnset(request.digitalTemplateParam)) {
            query["DigitalTemplateParam"] = request.digitalTemplateParam;
        }
        if (!tea_util_1.default.isUnset(request.fallbackType)) {
            query["FallbackType"] = request.fallbackType;
        }
        if (!tea_util_1.default.isUnset(request.outId)) {
            query["OutId"] = request.outId;
        }
        if (!tea_util_1.default.isUnset(request.signName)) {
            query["SignName"] = request.signName;
        }
        if (!tea_util_1.default.isUnset(request.smsTemplateCode)) {
            query["SmsTemplateCode"] = request.smsTemplateCode;
        }
        if (!tea_util_1.default.isUnset(request.smsTemplateParam)) {
            query["SmsTemplateParam"] = request.smsTemplateParam;
        }
        if (!tea_util_1.default.isUnset(request.smsUpExtendCode)) {
            query["SmsUpExtendCode"] = request.smsUpExtendCode;
        }
        if (!tea_util_1.default.isUnset(request.templateCode)) {
            query["TemplateCode"] = request.templateCode;
        }
        if (!tea_util_1.default.isUnset(request.templateParam)) {
            query["TemplateParam"] = request.templateParam;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SendCardSms",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SendCardSmsResponse({}));
    }
    async sendCardSms(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.sendCardSmsWithOptions(request, runtime);
    }
    async sendSmsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.outId)) {
            query["OutId"] = request.outId;
        }
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.phoneNumbers)) {
            query["PhoneNumbers"] = request.phoneNumbers;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.signName)) {
            query["SignName"] = request.signName;
        }
        if (!tea_util_1.default.isUnset(request.smsUpExtendCode)) {
            query["SmsUpExtendCode"] = request.smsUpExtendCode;
        }
        if (!tea_util_1.default.isUnset(request.templateCode)) {
            query["TemplateCode"] = request.templateCode;
        }
        if (!tea_util_1.default.isUnset(request.templateParam)) {
            query["TemplateParam"] = request.templateParam;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SendSms",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SendSmsResponse({}));
    }
    async sendSms(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.sendSmsWithOptions(request, runtime);
    }
    async smsConversionIntlWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.conversionTime)) {
            query["ConversionTime"] = request.conversionTime;
        }
        if (!tea_util_1.default.isUnset(request.delivered)) {
            query["Delivered"] = request.delivered;
        }
        if (!tea_util_1.default.isUnset(request.messageId)) {
            query["MessageId"] = request.messageId;
        }
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SmsConversionIntl",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SmsConversionIntlResponse({}));
    }
    async smsConversionIntl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.smsConversionIntlWithOptions(request, runtime);
    }
    async tagResourcesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.prodCode)) {
            query["ProdCode"] = request.prodCode;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.resourceId)) {
            query["ResourceId"] = request.resourceId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceType)) {
            query["ResourceType"] = request.resourceType;
        }
        if (!tea_util_1.default.isUnset(request.tag)) {
            query["Tag"] = request.tag;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "TagResources",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new TagResourcesResponse({}));
    }
    async tagResources(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.tagResourcesWithOptions(request, runtime);
    }
    async untagResourcesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.all)) {
            query["All"] = request.all;
        }
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.prodCode)) {
            query["ProdCode"] = request.prodCode;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.resourceId)) {
            query["ResourceId"] = request.resourceId;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerAccount)) {
            query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
        }
        if (!tea_util_1.default.isUnset(request.resourceOwnerId)) {
            query["ResourceOwnerId"] = request.resourceOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.resourceType)) {
            query["ResourceType"] = request.resourceType;
        }
        if (!tea_util_1.default.isUnset(request.tagKey)) {
            query["TagKey"] = request.tagKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UntagResources",
            version: "2017-05-25",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UntagResourcesResponse({}));
    }
    async untagResources(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.untagResourcesWithOptions(request, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map